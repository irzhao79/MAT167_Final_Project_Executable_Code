% Given matrix A
A = [0 1 0 1 0 0 0 0 0 0 0 0; % A links to B,D
0 0 0 1 1 0 0 0 0 0 0 0; % B links to D,E
1 1 0 0 0 0 0 1 0 0 0 0; % C links to B,H,A
0 0 0 0 1 1 0 0 0 0 0 0; % D links to E,F
0 0 1 1 0 0 1 1 0 0 0 0; % E links to C,D,G,H
1 0 0 1 0 0 1 0 0 0 1 0; % F links to D,G,A,K
0 0 0 1 0 0 0 0 1 0 0 0; % G links to D,I
0 0 0 0 0 0 1 0 0 1 0 0; % H links to G,J
0 0 0 0 0 1 0 0 0 1 1 0; % I links to F,K,J
0 0 0 0 0 0 0 0 1 0 0 1; % J links to L,I
0 0 0 0 0 0 0 0 1 0 0 1; % K links to I,L
0 0 0 0 0 0 0 0 0 0 0 0]; % L doesn't link to any webpage
%1.
%Calculate sum of each row in matrix
%Normalize rows to 1/N
N = size(A, 1);
row_sums = sum(A, 2);
zero_rows = row_sums == 0;
row_sums(zero_rows) = N;
%Get matrix G
G = A ./ row_sums;
disp('Matrix G is: ')
G
%2.
%Implement power iteration method
%Set pi_2 to size N with elements as 1/N for initiating probability
%distribution
pi = ones(1, N) / N;
for k = 1:100
%Power Iteration
pi_next = pi * G;
%Normalization, checks if it is a valid probability distribution
pi_next = pi_next / norm(pi_next, 1);
%Check for convergence
if norm(pi_next - pi, 1) < 1e-6
break;
end
pi = pi_next;
end
%If distribution did not converge, make sure the code updates pi_2 to be
%pi_next to repeat the for loop
pi = pi_next;
disp('pi is:')
disp(pi)
%Get left-hand side, should be equal to pi_2
lhs_2 = pi * G;
%Get 1-norm difference between lhs_2 and pi_2 and determine whether pi_2 is
%in a steady-state distribution
diff_2 = norm(lhs_2 - pi, 1);
%3.
%Determine whether values of pi_2 is nonnegative
all(pi >= 0);
%4.
%Check if dangling nodes exist in matrix G
dangling_nodes = sum(G, 2) == 0;
%Updates nodes to 1/N probability to link to pages all with equal
%probability
G(dangling_nodes, :) = 1/N;
%5.
%Get steady-state probabilities and store into pi_5
pi = ones(1, N) / N;
for k = 1:100
pi_next = pi * G;
pi_next = pi_next / norm(pi_next, 1);
if norm(pi_next - pi, 1) < 1e-6
break;
end
pi = pi_next;
end
%If distribution did not converge, make sure the code updates pi_5 to be
%pi_next to repeat the for loop
pi = pi_next;
%Get left-hand side, should equal to pi_5
lhs_5 = pi * G;
%Calculate difference between left-hand side and pi_5
diff_5 = norm(lhs_5 - pi, 1);
%6.
%Normalize pi_5 and store into pi_6
pi = pi / norm(pi, 1);
%7.
%Sort into descending order and store into pi_sorted_7 & sort_indices_7
[pi_sorted_7, sort_indices_7] = sort(pi, 'descend');
%8.
%Get steady-state probabilities and store into pi_8
pi = ones(1, N) / N;
tol = 1e-6;
for k = 1:100
pi_next = pi * G;
pi_next = pi_next / norm(pi_next, 1);
if norm(pi_next - pi, 1) < tol
disp(['Converged after ', num2str(k), ' iterations.']);
break;
end
pi = pi_next;
end
pi = pi_next;
webPages = cell(1, 12);
for i = 1:12
    webPages{i} = sprintf('webpage %c', 'A' + i - 1);
end
[pi, sort_indices_8] = sort(pi, 'descend');
disp('pi after being sorted is')
disp(pi');
disp('Webpages in pagerank order')
disp(webPages(sort_indices_8)')
%9.
%Construct G_tilde
%set alpha/damping factor to 0.85
alpha = 0.85;
E = ones(N, N) / N;
%Get G_tilde (given)
G_tilde = alpha * G + (1 - alpha) * E;
%10.
%Perform eigendecomposition on G_tilde
%transpose because matlab uses eig on columns instead of rows
[V, D] = eig(G_tilde');
[max_eigval, max_eigval_index] = max(abs(diag(D)));
pi_tilde = abs(V(:, max_eigval_index));
% Normalize to get steady state probabilities
pi_tilde = pi_tilde / sum(pi_tilde);
%11. Compare rankings from G and G_tilde
pi = ones(N, 1) / N;
for k = 1:100
pi_next = G' * pi; % 'power iteration
pi_next = pi_next / norm(pi_next, 1); % normalization
if norm(pi_next - pi, 1) < 1e-6
break;
end
pi = pi_next;
end
% Compare the rankings after sorting pi_6 and pi_10 in descending order
[pi_sorted, sort_indices_6] = sort(pi, 'descend');
[pi_sorted_tilde, sort_indices_10] = sort(pi_tilde, 'descend');
% Display the sorted indices for both raw and modified Google matrix
%Ranking comparisons where these are the rankings of webpages
%fprintf('pi =  %d\tpi_tilde = %d',pi_sorted',pi_sorted_tilde')
disp('pi_tilde = ')
disp(pi_sorted_tilde);   %%
disp('Webpages in pagerank order:')
disp(webPages(sort_indices_10)');   %%
%12.
%Task: Create T matrix
% Define the keywords for each webpage
webpages = {
'WebPage A', {'Super Foods', 'Apples', 'Bananas', 'Broccoli', 'Cabbage', 'Kumquats', 'Strawberries'};
'WebPage B', {'Magic Fruits', 'Oranges', 'Plums', 'Coconuts', 'Kumquats', 'Blueberries', 'Cherries', 'Strawberries'};
'WebPage C', {'Sam’s Produce', 'Lettuce', 'Spinach', 'Bananas', 'Blackberries', 'Peas', 'Strawberries'};
'WebPage D', {'Corner Market', 'Oranges', 'Onions', 'Celery', 'Kumquats', 'Corn', 'Radishes'};
'WebPage E', {'Eli’s Organic', 'Pineapples', 'Plums', 'Corn', 'Cherries', 'Broccoli', 'Peas', 'Strawberries'};
'WebPage F', {'Crunchy Munchies', 'Lettuce', 'Onions', 'Coconuts', 'Spinach', 'Peas', 'Strawberries'};
'WebPage G', {'HomeGrown', 'Apples', 'Onions', 'Broccoli', 'Corn', 'Cabbage', 'Peas'};
'WebPage H', {'Berry Palace', 'Plums', 'Blueberries', 'Raspberries', 'Blackberries', 'Strawberries'};
'WebPage I', {'Cheap Eats', 'Apples', 'Cucumbers', 'Carrots', 'Spinach', 'Corn', 'Black Beans', 'Cabbage'};
'WebPage J', {'Salads ’R Us', 'Mushrooms', 'Carrots', 'Lettuce', 'Radishes', 'Peppers', 'Broccoli', 'Spinach'};
'WebPage K', {'World of Produce', 'Carrots', 'Lettuce', 'Celery', 'Onions', 'Cabbage', 'Peas'};
'WebPage L', {'Good Eats', 'Broccoli', 'Cabbage', 'Carrots', 'Spinach', 'Corn', 'Peas'}
};
% Get all unique terms
terms = unique([webpages{:, 2}]);
% Number of webpages and terms
numWebpages = size(webpages, 1);
numTerms = length(terms);
% Create a matrix to store the term-document matrix
T = zeros(numTerms, numWebpages);
% Fill in the matrix
for i = 1:numWebpages
webpageTerms = webpages{i, 2};
for j = 1:numTerms
T(j, i) = any(strcmp(terms{j}, webpageTerms));
end
end
%13a.
% Define the query for 'Corn'
q1 = zeros(numTerms, 1);
q1(strcmp(terms, 'Corn')) = 1;
% Compute d6 = q6' * T
d1 = q1' * T;
disp('The result vector d1:')
disp(d1)
% Find the indices of the webpages that are responsive to "Corn"
responsive_indices_cc = find(d1 > 0);
% Get the responsive webpages and their scores
responsive_webpages_ml = webpages(responsive_indices_cc, 1);
responsive_scores_ml = d1(responsive_indices_cc);
% Order responsive webpages and their scores by their scores in descending order
[~, order] = sort(responsive_scores_ml, 'descend');
ordered_webpages_sb = responsive_webpages_ml(order);
% Display the ordered webpages
disp('Webpages responsive to "Corn":');
[pageRank,sortedID] = sort(pi_tilde(logical(d1)),'descend');% Assigning the pages associated with 'Corn'
disp(ordered_webpages_sb(sortedID));
disp(pageRank)
%13b.
% Define query for 'Mushrooms' and 'Lettuce'
% Create a query vector
q2 = zeros(numTerms, 1);
q2(strcmp(terms, 'Mushrooms')) = 1;
q2(strcmp(terms, 'Lettuce')) = 1;
% Compute d2 = q2' * T
d2 = q2' * T;
% Find the indices of the webpages that are responsive to "Mushrooms" and "Lettuce"
responsive_indices_cc = find(d2 == length(find(q2 == 1)));
% Get the responsive webpages and their scores
responsive_webpages_ml = webpages(responsive_indices_cc, 1);
responsive_scores_ml = d2(responsive_indices_cc);
% Order responsive webpages by their scores in descending order
[~, order] = sort(responsive_scores_ml, 'descend');
ordered_webpages_ml = responsive_webpages_ml(order);
d2 = d2 == max(d2); %To find the webpages responding to 'and' we will find the max query and index
disp('The result vector d2:')
disp(d2)
%disp(d2(d2==max(d2)))
% Display the ordered webpages
disp('Webpages responsive to "Mushrooms" and "Lettuce":');
[pageRank,sortedID] = sort(pi_tilde(logical(d2)),'descend');% Assigning the pages associated with 'Corn'
disp(ordered_webpages_ml(sortedID));
disp(pageRank)
%13c.
% Create a query vector
q3 = zeros(numTerms, 1);
q3(strcmp(terms, 'Strawberries')) = 1;
q3(strcmp(terms, 'Blackberries')) = 1;
% Compute d8 = q8' * T
d3 = q3' * T;
disp('The result vector d3:')
disp(d3)
% Find the indices of the webpages that are responsive to "Strawberries" or "Blackberries"
responsive_indices_sb = find(d3 > 0);
% Get the responsive webpages and their scores
responsive_webpages_sb = webpages(responsive_indices_sb, 1);
responsive_scores_sb = d3(responsive_indices_sb);
% Order responsive webpages and their scores by their scores in descending order
[sorted_scores, order] = sort(responsive_scores_sb, 'descend');
ordered_webpages_sb = responsive_webpages_sb(order);
% Display the ordered webpages and their scores
disp('Webpages responsive to "Strawberries" or "Blackberries":');
[pageRank,sortedID] = sort(pi_tilde(logical(d3)),'descend');% Assigning the pages associated with 'Corn'
disp(ordered_webpages_sb(sortedID));
disp(pageRank)
%13d.
% Create a query vector for Cucumbers but not Carrots
q4 = zeros(numTerms, 1);
q4(strcmp(terms, 'Cucumbers')) = 1;
q4(strcmp(terms, 'Carrots')) = -1;
% Compute d4 = q4' * T
d4 = q4' * T;
disp('The result vector d4:')
disp(d4)
% Print the webpages that are responsive to "Cucumbers" but not "Carrots"
disp("Webpages responsive to 'Cucumbers' but not 'Carrots':");
responsive_indices_cc = find(d4 == 1)
disp(webpages(responsive_indices_cc, 1))
disp('There are no webpages that are responsive to Cucumbers but not Carrots');
d4 = d4 == 1;
[pageRank,sortedID] = sort(pi_tilde(logical(d4)),'descend');% Assigning the pages associated with 'Corn'
disp(ordered_webpages_sb(sortedID));
disp(pageRank)
